// automatically generated by the FlatBuffers compiler, do not modify

package Editor;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class NodeTree extends Table {
  public static NodeTree getRootAsNodeTree(ByteBuffer _bb) { return getRootAsNodeTree(_bb, new NodeTree()); }
  public static NodeTree getRootAsNodeTree(ByteBuffer _bb, NodeTree obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public NodeTree __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public Vec2f position() { return position(new Vec2f()); }
  public Vec2f position(Vec2f obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public Vec2f scale() { return scale(new Vec2f()); }
  public Vec2f scale(Vec2f obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public Sizef size() { return size(new Sizef()); }
  public Sizef size(Sizef obj) { int o = __offset(10); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public int rotation() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public Vec2f anchor() { return anchor(new Vec2f()); }
  public Vec2f anchor(Vec2f obj) { int o = __offset(14); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public int zOrder() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int opacity() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public Vec4f color() { return color(new Vec4f()); }
  public Vec4f color(Vec4f obj) { int o = __offset(20); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public NodeTree children(int j) { return children(new NodeTree(), j); }
  public NodeTree children(NodeTree obj, int j) { int o = __offset(22); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int childrenLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public byte type() { int o = __offset(24); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte componentType() { int o = __offset(26); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table component(Table obj) { int o = __offset(28); return o != 0 ? __union(obj, o) : null; }
  public boolean enablePhysics() { int o = __offset(30); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public Body physics() { return physics(new Body()); }
  public Body physics(Body obj) { int o = __offset(32); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static void startNodeTree(FlatBufferBuilder builder) { builder.startObject(15); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addPosition(FlatBufferBuilder builder, int positionOffset) { builder.addStruct(1, positionOffset, 0); }
  public static void addScale(FlatBufferBuilder builder, int scaleOffset) { builder.addStruct(2, scaleOffset, 0); }
  public static void addSize(FlatBufferBuilder builder, int sizeOffset) { builder.addStruct(3, sizeOffset, 0); }
  public static void addRotation(FlatBufferBuilder builder, int rotation) { builder.addInt(4, rotation, 0); }
  public static void addAnchor(FlatBufferBuilder builder, int anchorOffset) { builder.addStruct(5, anchorOffset, 0); }
  public static void addZOrder(FlatBufferBuilder builder, int zOrder) { builder.addInt(6, zOrder, 0); }
  public static void addOpacity(FlatBufferBuilder builder, int opacity) { builder.addByte(7, (byte)opacity, (byte)0); }
  public static void addColor(FlatBufferBuilder builder, int colorOffset) { builder.addStruct(8, colorOffset, 0); }
  public static void addChildren(FlatBufferBuilder builder, int childrenOffset) { builder.addOffset(9, childrenOffset, 0); }
  public static int createChildrenVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startChildrenVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(10, type, 0); }
  public static void addComponentType(FlatBufferBuilder builder, byte componentType) { builder.addByte(11, componentType, 0); }
  public static void addComponent(FlatBufferBuilder builder, int componentOffset) { builder.addOffset(12, componentOffset, 0); }
  public static void addEnablePhysics(FlatBufferBuilder builder, boolean enablePhysics) { builder.addBoolean(13, enablePhysics, false); }
  public static void addPhysics(FlatBufferBuilder builder, int physicsOffset) { builder.addOffset(14, physicsOffset, 0); }
  public static int endNodeTree(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

