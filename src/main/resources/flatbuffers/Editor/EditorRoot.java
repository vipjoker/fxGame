// automatically generated by the FlatBuffers compiler, do not modify

package Editor;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class EditorRoot extends Table {
  public static EditorRoot getRootAsEditorRoot(ByteBuffer _bb) { return getRootAsEditorRoot(_bb, new EditorRoot()); }
  public static EditorRoot getRootAsEditorRoot(ByteBuffer _bb, EditorRoot obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public EditorRoot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String textures(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int texturesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public NodeTree nodes(int j) { return nodes(new NodeTree(), j); }
  public NodeTree nodes(NodeTree obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int nodesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createEditorRoot(FlatBufferBuilder builder,
      int texturesOffset,
      int nodesOffset) {
    builder.startObject(2);
    EditorRoot.addNodes(builder, nodesOffset);
    EditorRoot.addTextures(builder, texturesOffset);
    return EditorRoot.endEditorRoot(builder);
  }

  public static void startEditorRoot(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addTextures(FlatBufferBuilder builder, int texturesOffset) { builder.addOffset(0, texturesOffset, 0); }
  public static int createTexturesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTexturesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNodes(FlatBufferBuilder builder, int nodesOffset) { builder.addOffset(1, nodesOffset, 0); }
  public static int createNodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endEditorRoot(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishEditorRootBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

